#Polynomial Regression

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('Position_Salaries.csv')
X = dataset.iloc[:, 1:2].values
y = dataset.iloc[:, 2].values

# Splitting the dataset into the Training set and Test set
'''from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)'''

#since we have categorical features we will use label encoder as well as one hot encoder to convert into 1's and 0's
#but taking a look at the data the level coloumn is acting as the encoder, HENCE NO NEED OF ONE HOT ENCODING
 #from sklearn.preprocessing import LabelEncoder , OneHotEncoder
 
#FITTING Linear Regression to th dataset
 from sklearn.linear_model import LinearRegression
 lin_reg = LinearRegression()
 lin_reg.fit(X,y)
 
#FITTING Polynomial Regression to th dataset
 from sklearn.preprocessing import PolynomialFeatures
 poly_reg = PolynomialFeatures(degree = 4)
 X_poly = poly_reg.fit_transform(X)  #Creates a Matrix of Independent Variables with columns upto the specified degree'''
 poly_reg.fit(X_poly,y)
 lin_reg2 = LinearRegression()
 lin_reg2.fit(X_poly,y)
 
 #Visualising the data for Linear regression
 plt.scatter(X,y,color = 'red')
 plt.plot(X,lin_reg.predict(X),color = 'blue')
 plt.title('TRUTH OR BLUFF(LINEAR REGRESSION)')
 plt.xlabel('POSITION LEVEL')
 plt.ylabel('SALARY')
 plt.show()
 
 
 #visualising the data for polynomial regression
 plt.scatter(X,y,color = 'red')
 plt.plot(X,lin_reg2.predict(poly_reg.fit_transform(X)),color = 'blue')
 plt.title('TRUTH OR BLUFF(Polynomial REGRESSION)')
 plt.xlabel('POSITION LEVEL')
 plt.ylabel('SALARY')
 plt.show()
